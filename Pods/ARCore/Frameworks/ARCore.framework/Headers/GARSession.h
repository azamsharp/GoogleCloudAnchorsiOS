/*
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <ARKit/ARKit.h>

@class GARAnchor;
@class GARFrame;
@class GARFramePair;
@protocol GARSessionDelegate;

NS_ASSUME_NONNULL_BEGIN

/** The domain for NSError's generated by a GARSession. */
extern const NSErrorDomain GARSessionErrorDomain;

/** Possible codes for NSError's generated by a GARSession. */
typedef NS_ENUM(NSInteger, GARSessionErrorCode) {
  /** This device is not currently supported. */
  GARSessionErrorCodeDeviceNotCompatible = -1,
  /** An argument is nil or otherwise invalid (as noted in doc comment). */
  GARSessionErrorCodeInvalidArgument = -2,
  /**
   * The operation could not be completed because the ARSession's current tracking state is not
   * ARTrackingStateNormal.
   */
  GARSessionErrorCodeNotTracking = -3,
  /**
   * An ARFrame was passed to |update:error:| that is older than a previously passed in frame.
   * Please consult documentation on usage of the |update:error:| method.
   */
  GARSessionErrorCodeFrameOutOfOrder = -4,
  /** |hostCloudAnchor:error:| was called with an unsupported ARAnchor type. */
  GARSessionErrorCodeAnchorNotSupportedForHosting = -5
};

/**
 * ARCore session class. Adds Google AR features to an app using ARKit.
 */
@interface GARSession : NSObject

/**
 * The most recent frame pair, containing the most recent ARFrame passed into |update:error:| and
 * the corresponding returned GARFrame.
 */
@property(atomic, readonly, nullable) GARFramePair *currentFramePair;

/**
 * The delegate for receiving callbacks about the GARSession.
 */
@property(atomic, weak, nullable) id<GARSessionDelegate> delegate;

/**
 * The dispatch queue on which the delegate receives calls.
 * If nil, callbacks happen on the main thread.
 */
@property(atomic, nullable) dispatch_queue_t delegateQueue;

/**
 * Creates a GARSession with an API key and bundle identifier.
 *
 * @param apiKey Your API key for Google Cloud Services.
 * @param bundleIdentifier The bundle identifier associated to your API key. If nil, defaults to
 *                         [[NSBundle mainBundle] bundleIdentifier].
 * @param error Out parameter for an NSError. Possible errors:
 *              GARSessionErrorCodeDeviceNotCompatible - this device is not currently supported.
 *              GARSessionErrorCodeInvalidArgument - API key is nil or empty.
 * @return The new GARSession, or nil if there is an error.
 */
+ (instancetype _Nullable)sessionWithAPIKey:(NSString *)apiKey
                           bundleIdentifier:(NSString *_Nullable)bundleIdentifier
                                      error:(NSError **)error;

/**
 * Use |sessionWithAPIKey:bundleIdentifier:error:| to instantiate a GARSession.
 */
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)new NS_UNAVAILABLE;

/**
 * Updates the GARSession with an ARFrame.
 * Call this method with every ARFrame to keep the sessions synced. Can be called on any thread.
 * Normally, this should be called from your ARSessionDelegate's |session:didUpdateFrame:| method.
 *
 * @param frame The next ARFrame from ARKit.
 * @param error Out parameter for NSError. Possible errors:
 *              GARSessionErrorCodeInvalidArgument - invalid (nil) frame.
 *              GARSessionErrorCodeFrameOutOfOrder - frame has a smaller timestamp than previous.
 * @return The GARFrame corresponding to the ARFrame passed in, or nil if there is an error.
 */
- (GARFrame *_Nullable)update:(ARFrame *)frame error:(NSError **)error;

/**
 * Removes an anchor from the session.
 *
 * @param anchor The anchor to remove.
 */
- (void)removeAnchor:(GARAnchor *)anchor;

/**
 * Hosts a new cloud anchor based on an ARAnchor.
 *
 * @param anchor The ARAnchor to host.
 * @param error Out parameter for an NSError. Possible errors:
 *              GARSessionErrorCodeInvalidArgument - invalid (nil) anchor.
 *              GARSessionErrorCodeNotTracking - bad current ARTrackingState.
 *              GARSessionErrorCodeAnchorNotSupportedForHosting - anchor type unsupported. Currently
 *                  ARFaceAnchor is the only unsupported type.
 * @return The new GARAnchor, or nil if there is an error.
 */
- (GARAnchor *_Nullable)hostCloudAnchor:(ARAnchor *)anchor error:(NSError **)error;

/**
 * Resolves a cloud anchor.
 * The new anchor is immediately added to the session and returned, but without a valid transform.
 * If resolving fails, the anchor will be automatically removed from the session.
 *
 * @param identifier The cloud anchor identifier for the anchor.
 * @param error Out parameter for an NSError. Possible errors:
 *              GARSessionErrorCodeInvalidArgument - invalid (nil or empty) identifier.
 *              GARSessionErrorCodeNotTracking - bad current ARTrackingState.
 * @return The new GARAnchor, or nil if there is an error.
 */
- (GARAnchor *_Nullable)resolveCloudAnchorWithIdentifier:(NSString *)identifier
                                                   error:(NSError **)error;

@end

NS_ASSUME_NONNULL_END
